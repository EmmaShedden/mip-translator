/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./env.jj */
/*@egen*/options {
                 
    KEEP_LINE_COLUMN = false;
}

PARSER_BEGIN(Env)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Env/*@bgen(jjtree)*/implements EnvTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTEnvState jjtree = new JJTEnvState();

/*@egen*/
    // Main entry point

    public static void main(String args[]) throws ParseException, TokenMgrError, FileNotFoundException {
        // Env parser = new Env(System.in);
        Env parser = new Env(new FileInputStream("input.txt"));
        ASTRoot n = parser.Root();
        // System.out.println("\n");
        n.dump("");
    }
}

PARSER_END(Env)

SKIP :
{
    " "
|   "\t"
|   "\f"
}

// can't figure out how to comment
// |   "//" (~["\n", "\r", <EOF>])* ("\n" | "\r" | <EOF>)

TOKEN :
{
    < INTLABEL : "Int" >
|   < FLOATLABEL : "Float" >
|   < VARLABEL : "var" >
}

TOKEN :
{
    < #DIGIT : ["0"-"9"] >
|   < INTEGER : (<DIGIT>)+ >
|   < FLOAT : <INTEGER> "." <INTEGER> >
|   < #LETTER : ["a"-"z"] | ["A"-"Z"] >
|   < WORD : <LETTER> (<LETTER> | <DIGIT>)* >
|   < PRIMEWORD : <WORD> "'" >
}

ASTRoot Root() : {/*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Root */
    try {
/*@egen*/
    ("\n" | "\r")*
    (Assignment() | TypeDef())
    (("\n" | "\r")+ (Assignment() | TypeDef() | <EOF>))*
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Assignment() : {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Assignment */
    try {
/*@egen*/
    (Var() | PrimeVar()) "=" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Var() : {/*@bgen(jjtree) Var */
              ASTVar jjtn000 = new ASTVar(JJTVAR);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Var */
    try {
/*@egen*/
    t = <WORD>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrimeVar() : {/*@bgen(jjtree) PrimeVar */
                   ASTPrimeVar jjtn000 = new ASTPrimeVar(JJTPRIMEVAR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) PrimeVar */
    try {
/*@egen*/
    t = <PRIMEWORD>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()       : {List<String> ops = new ArrayList<String>(); String op;} {/*@bgen(jjtree) #Expression(> 1) */
    {
      ASTExpression jjtn001 = new ASTExpression(JJTEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        Term() ((op = "+".image | op = "-".image) Term() {ops.add(op);})*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          jjtc001 = false;
        }
/*@egen*/
        {jjtn001.setOps(ops);}
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
                   
}

// TODO the same thing as above
void Term()       : {List<String> ops = new ArrayList<String>(); String op;} {/*@bgen(jjtree) #Term(> 1) */
    {
      ASTTerm jjtn001 = new ASTTerm(JJTTERM);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        Factor() ((op = "*".image | op = "/".image) Factor() {ops.add(op);})*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          jjtc001 = false;
        }
/*@egen*/
        {jjtn001.setOps(ops);}
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
             
}

void Factor()       : {} {
    Primary()
    |/*@bgen(jjtree) Factor */
      {
        ASTFactor jjtn001 = new ASTFactor(JJTFACTOR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ (
        "+" Primary()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                      }
/*@egen*/ {jjtn001.setName("+");}
        | "-" Primary()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                        }
/*@egen*/ {jjtn001.setName("-");}
    )/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/
           
}

void Primary()       : {} {
    Integer() | Float() | Var() | "(" Expression() ")"
}

void Integer() : {/*@bgen(jjtree) Integer */
                  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Integer */
    try {
/*@egen*/
    t = <INTEGER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Float() : {/*@bgen(jjtree) Float */
                ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Float */
    try {
/*@egen*/
    t = <FLOAT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeDef() : {/*@bgen(jjtree) TypeDef */
  ASTTypeDef jjtn000 = new ASTTypeDef(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) TypeDef */
    try {
/*@egen*/
    <VARLABEL> Var() ":" (Type() | Range())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Type */
    try {
/*@egen*/
    (t = <INTLABEL> | t = <FLOATLABEL>)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// should I assign the range type here or figure it out in the visitor?
void Range() : {/*@bgen(jjtree) Range */
  ASTRange jjtn000 = new ASTRange(JJTRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Range */
    try {
/*@egen*/
    ConstExpression() ".." ConstExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConstExpression()       : {} {/*@bgen(jjtree) #ConstExpression(> 1) */
    {
      ASTConstExpression jjtn001 = new ASTConstExpression(JJTCONSTEXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        ConstTerm() (("+" | "-") ConstTerm())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
                        
}

void ConstTerm()       : {} {/*@bgen(jjtree) #ConstTerm(> 1) */
    {
      ASTConstTerm jjtn001 = new ASTConstTerm(JJTCONSTTERM);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (
        ConstFactor() (("*" | "/") ConstFactor())*
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/
                  
}

void ConstFactor()       : {} {
    ConstPrimary()
    |/*@bgen(jjtree) ConstFactor */
      {
        ASTConstFactor jjtn001 = new ASTConstFactor(JJTCONSTFACTOR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ (
        "+" ConstPrimary()/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtc001 = false;
                           }
/*@egen*/ {jjtn001.setName("+");}
        | "-" ConstPrimary()/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtc001 = false;
                             }
/*@egen*/ {jjtn001.setName("-");}
    )/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/
                
}

void ConstPrimary()       : {} {
    Integer() | Float() | "(" ConstExpression() ")"
}
