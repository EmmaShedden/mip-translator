options {
    MULTI = true;
    KEEP_LINE_COLUMN = false;
}

PARSER_BEGIN(Env)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Env {
    // Main entry point

    public static void main(String args[]) throws ParseException, TokenMgrError, FileNotFoundException {
        // Env parser = new Env(System.in);
        Env parser = new Env(new FileInputStream("input.txt"));
        ASTRoot n = parser.Root();
        // System.out.println("\n");
        n.dump("");
    }
}

PARSER_END(Env)

SKIP :
{
    " "
|   "\t"
|   "\f"
}

// can't figure out how to comment
// |   "//" (~["\n", "\r", <EOF>])* ("\n" | "\r" | <EOF>)

TOKEN :
{
    < INTLABEL : "Int" >
|   < FLOATLABEL : "Float" >
|   < VARLABEL : "var" >
}

TOKEN :
{
    < #DIGIT : ["0"-"9"] >
|   < INTEGER : (<DIGIT>)+ >
|   < FLOAT : <INTEGER> "." <INTEGER> >
|   < #LETTER : ["a"-"z"] | ["A"-"Z"] >
|   < WORD : <LETTER> (<LETTER> | <DIGIT>)* >
|   < PRIMEWORD : <WORD> "'" >
}

ASTRoot Root() : {} {
    ("\n" | "\r")*
    (Assignment() | TypeDef())
    (("\n" | "\r")+ (Assignment() | TypeDef() | <EOF>))*
    <EOF>
    { return jjtThis; }
}

void Assignment() : {} {
    (Var() | PrimeVar()) "=" Expression()
}

void Var() : {Token t;} {
    t = <WORD>
    {
        jjtThis.setName(t.image);
    }
}

void PrimeVar() : {Token t;} {
    t = <PRIMEWORD>
    {
        jjtThis.setName(t.image);
    }
}

void Expression() #void : {List<String> ops = new ArrayList<String>(); String op;} {
    (
        Term() ((op = "+".image | op = "-".image) Term() {ops.add(op);})*
        {jjtThis.setOps(ops);}
    )
    #Expression(>1)
}

void Term() #void : {List<String> ops = new ArrayList<String>(); String op;} {
    (
        Factor() ((op = "*".image | op = "/".image) Factor() {ops.add(op);})*
        {jjtThis.setOps(ops);}
    )
    #Term(>1)
}

void Factor() #void : {} {
    Primary()
    | (
        "+" Primary() {jjtThis.setName("+");}
        | "-" Primary() {jjtThis.setName("-");}
    )
    #Factor
}

void Primary() #void : {} {
    Integer() | Float() | Var() | "(" Expression() ")"
}

void Integer() : {Token t;} {
    t = <INTEGER>
    {
        jjtThis.setName(t.image);
    }
}

void Float() : {Token t;} {
    t = <FLOAT>
    {
        jjtThis.setName(t.image);
    }
}

void TypeDef() : {} {
    <VARLABEL> Var() ":" (Type() | Range())
}

void Type() : {Token t;} {
    (t = <INTLABEL> | t = <FLOATLABEL>)
    {
        jjtThis.setName(t.image);
    }
}

// should I assign the range type here or figure it out in the visitor?
void Range() : {} {
    ConstExpression() ".." ConstExpression()
}

void ConstExpression() #void : {} {
    (
        ConstTerm() (("+" | "-") ConstTerm())*
    )
    #ConstExpression(>1)
}

void ConstTerm() #void : {} {
    (
        ConstFactor() (("*" | "/") ConstFactor())*
    )
    #ConstTerm(>1)
}

void ConstFactor() #void : {} {
    ConstPrimary()
    | (
        "+" ConstPrimary() {jjtThis.setName("+");}
        | "-" ConstPrimary() {jjtThis.setName("-");}
    )
    #ConstFactor
}

void ConstPrimary() #void : {} {
    Integer() | Float() | "(" ConstExpression() ")"
}
