PARSER_BEGIN(Env)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Env {
    // Main entry point

    public static void main(String args[]) throws ParseException, TokenMgrError {
        Env parser = new Env(System.in);
        // Env parser = new Env(new FileInputStream("input.txt"));
        parser.Start();
    }
}

PARSER_END(Env)

SKIP :
{
    " "
|   "\t"
|   "\f"
}

// can't figure out how to comment
// |   "//" (~["\n", "\r", <EOF>])* ("\n" | "\r" | <EOF>)

TOKEN :
{
    < INTLABEL : "Int" >
|   < FLOATLABEL : "Float" >
|   < VARLABEL : "var" >
}

TOKEN :
{
    < #DIGIT : ["0"-"9"] >
|   < INTEGER : (<DIGIT>)+ >
|   < FLOAT : <INTEGER> "." <INTEGER> >
|   < #LETTER : ["a"-"z"] | ["A"-"Z"] >
|   < WORD : <LETTER> (<LETTER> | <DIGIT>)* >
|   < PRIMEWORD : <WORD> "'" >
}

void Start() : {} {
    ("\n" | "\r")*
    (Assignment() | TypeDef())
    (("\n" | "\r")+ (Assignment() | TypeDef() | <EOF>))*
    <EOF>
}

void Assignment() : {} {
    (Var() | PrimeVar()) "=" Expression()
}

void Var() : {} {
    <WORD>
}

void PrimeVar() : {} {
    <PRIMEWORD>
}

void Expression() : {} {
    Term() (("+" | "-") Term())*
}

void Term() : {} {
    Factor() (("*" | "/") Factor())*
}

void Factor() : {} {
    Primary() | "+" Factor() | "-" Factor()
}

void Primary() : {} {
    <INTEGER> | <FLOAT> | Var() | "(" Expression() ")"
}

void TypeDef() : {} {
    <VARLABEL> Var() ":" (Type() | Range())
}

void Type() : {} {
    <INTLABEL> | <FLOATLABEL>
}

void Range() : {} {
    ConstExpression() ".." ConstExpression()
}

void ConstExpression() : {} {
    ConstTerm() (("+" | "-") ConstTerm())*
}

void ConstTerm() : {} {
    ConstFactor() (("*" | "/") ConstFactor())*
}

void ConstFactor() : {} {
    ConstPrimary() | "+" ConstFactor() | "-" ConstFactor()
}

void ConstPrimary() : {} {
    <INTEGER> | <FLOAT> | "(" ConstExpression() ")"
}

/*

// trying to figure out how to enable arithmetic expressions here
// and not just raw constants

void Range() : {} {
    (<INTEGER> | <FLOAT>) ".." (<INTEGER> | <FLOAT>)
}

*/
